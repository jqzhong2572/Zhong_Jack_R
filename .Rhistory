library('ggplot2')
data(diamonds)
data <- data.frame(diamonds)
library('ggplot2')
library('ggplot2')
install.packages("ggplot2")
library('ggplot2')
data(diamonds)
data <- data.frame(diamonds)
View(data)
View(diamonds)
View(data)
View(data)
data.names
data[names]
data[names,]
cat(colnames(data),sep = '\n')
help(cat)
colnames(data)
col_type <- lapply(data,class)
lapply(data,class)
colMeans(data[is.numeric(data)])
colMeans(data[is.numeric(data)])
colMeans(data[which(is.numeric(data)])
colMeans(data[which(is.numeric(data)])
colMeans(data[which(is.numeric(data))])
#6
col_type <- lapply(data,class)
colMeans(data[which(is.numeric(data))])
data[which(is.numeric(data))]
is.numeric(data)
lappy(is.numeric,data)
lapply(is.numeric,data)
lapply(is.numeric,data)
help("lapply")
lapply(data,is.numeric)
data[lapply(data,is.numeric)]
data[lapply(data,is.numeric)]
data[c( FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,TRUE)]
data[c( FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,TRUE)]
data[lapply(data,is.numeric),]
data[,lapply(data,is.numeric)]
data[,lapply(data,is.numeric)]
data[,sapply(data,is.numeric)]
data[sapply(data,is.numeric),]
head(data[sapply(data,is.numeric),]
head(data[sapply(data,is.numeric),])
data[sapply(data,is.numeric),]
data2 <- data[sapply(data,is.numeric),]
View(data2)
View(data2)
data2 <- data[,sapply(data,is.numeric)]
View(data2)
View(data2)
lapply(data[,sapply(data,is.numeric)],mean)
lapply(data[,sapply(data,is.factor)],cumsum)
cumsum(table(data$cut))
lapply(table(data[,sapply(data,is.factor)]),cumsum)
data[,sapply(data,is.factor)]
data <- data(diamonds)
View(data2)
names(data)
names(data[,])
names(data)
names(,data)
col.names
col.names(data)
data[,sapply(data,is.factor)]
data[,sapply(data,is.factor)]
data[,sapply(data,is.factor)]
data[,sapply(data,is.numeric)
data[,sapply(data,is.numeric)]
data[,sapply(data,is.numeric)]
lapply(data[,sapply(data,is.numeric)],mean)
data <- data(diamonds)
lapply(data[,sapply(data,is.numeric)],mean)
data <- data(diamonds)
data <- data.frame(diamonds)
View(data)
View(data)
lapply(data[,sapply(data,is.numeric)],mean)
data[,sapply(data,is.factor)]
lapply(table(data[,sapply(data,is.factor)]),cumsum)
table(data[,sapply(data,is.factor)])
help(table)
data[,sapply(data,is.factor)]
lapply(data[,sapply(data,is.factor)],table)
lapply(data[,sapply(data,is.factor)],table)
print(lapply(data[,sapply(data,is.factor)],table))
print(lapply(data[,sapply(data,is.numeric)],mean))
help('is.na')
rowSums(is.na(data)
rowSums(is.na(data))
rowSums(is.na(data))
is.na(data)
help(apply)
help(apply)
class(print(lapply(data[,sapply(data,is.numeric)],mean)))
is.list(print(lapply(data[,sapply(data,is.numeric)],mean)))
help(cumsum)
cumsum(1:3)
apply(is.na(data),1,sum)
apply(is.na(data),1,rowsums)
apply(data,1,is.na)
apply(data,is.na)
apply(data,is.na)
help apply
help(apply)
help(sapply)
is.na(data)
apply(is.na(data), 1, any)
data2<-structure(list(ID = c(1, 2, 3, 4, 7, 9, 10, 12, 13, 14, 15, 16,
17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 34, 37, 38, 39,
40, 41), QnSinV1 = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L), QnSinV2 = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L, 0L, 0L), QnSinV3 = c(0L, 0L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), QnSize = c(0.032140423, 0.017620319,
NA, -0.093448167, -0.051090375, 0.001188913, NA, -0.144868599,
-0.000260992, 0.008502255, -0.00346349, 0.017208373, 0.004301855,
0.004420431, -0.007564124, NA, 0.174388101, -0.142412328, 0.064935852,
-0.052174354, NA, 0.005180317, 0.05728222, 0.041215822, -0.002449455,
-0.040942923, -0.082284946, -0.173656321, 0.022723036, -0.061326436
), QnWt = c(15.8, 16.5, 11.9, 13.7, 15, 15.3, 13.7, 15.8, 16.3,
15.9, 15.1, 14.5, 14.4, 15.7, 14.4, 13.3, 14.8, 15.1, 15.1, 14.7,
15.8, 17.8, 16.4, 13.4, 15.1, 14.8, 14.2, 12.7, 17.9, 16.2),
QnWtLsCL = c(NA, 0.503030303, 0.596638655, NA, 0.446666667,
0.509803922, 0.408759124, 0.462025316, 0.552147239, 0.509433962,
0.456953642, 0.455172414, 0.506944444, NA, 0.486111111, 0.473684211,
0.513513514, 0.516556291, 0.582781457, 0.537414966, 0.474683544,
0.43258427, 0.432926829, NA, 0.569536424, 0.445945946, 0.485915493,
0.543307087, NA, 0.543209877), ClaustPer = c(NA, 1L, 2L,
NA, 3L, 0L, 2L, 0L, 1L, 0L, 0L, 0L, 1L, NA, 0L, 7L, 1L, 0L,
1L, 0L, 1L, 2L, 2L, NA, 2L, 3L, 2L, 2L, NA, 0L), QnSurvCL = c(0L,
1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L),
ColWtCL = c(NA, 11.7, 7.3, NA, 9.1, 11.1, 9.6, 11.2, 9, 11.2,
12, 11, 10.9, NA, 9.9, 8.6, 10.8, 10.9, 8.7, 10.8, 11.6,
13.7, 10.8, NA, 9.3, 9.6, 9.8, 8.7, NA, 11.1), ColWtCL_6 = c(NA,
57.1, 45, NA, 73.6, NA, NA, NA, 43.8, NA, NA, 71.1, NA, NA,
53.7, NA, 84.4, NA, NA, NA, 56, 56.1, NA, NA, 59.4, NA, 45.7,
NA, NA, NA), ColGrowthCL_6 = c(NA, 4.88034188, 6.164383562,
NA, 8.087912088, NA, NA, NA, 4.866666667, NA, NA, 6.463636364,
NA, NA, 5.424242424, NA, 7.814814815, NA, NA, NA, 4.827586207,
4.094890511, NA, NA, 6.387096774, NA, 4.663265306, NA, NA,
NA), QnSurvCL_6 = c(NA, 1L, NA, NA, 1L, NA, NA, NA, 1L, NA,
NA, 1L, NA, NA, 1L, 0L, 1L, NA, NA, NA, 1L, 1L, NA, NA, 1L,
NA, 1L, NA, NA, NA), IR = c(-0.1919695, 0.0214441, NA, 0.0886954,
0.4221713, 0.0869788, 0.2716466, 0.0289674, -0.0291414, -0.1739616,
-0.0215773, -0.1473209, 0.0370336, 0.254584, 0.0332632, -0.0203844,
0.1524175, -0.051451, -0.0612144, 0.1617955, 0.0354173, 0.0904954,
0.3344705, 0.0990583, 0.1985931, 0.0419539, -0.0159598, 0.1159526,
-0.0057495, -0.1811458), SH = c(1.2064, 1.1093, NA, 0.922,
0.643, 0.9284, 0.7225, 0.9866, 1.0804, 1.2226, 1.0315, 1.1953,
1.007, 0.6991, 1.0264, 1.0265, 0.8865, 1.1184, 1.094, 0.829,
1.0142, 0.9824, 0.6793, 0.9188, 0.7853, 1.0352, 1.0648, 0.9654,
1.0366, 1.2044), HL = c(0.3774, 0.4349, NA, 0.5091, 0.6187,
0.5168, 0.6405, 0.4691, 0.4555, 0.3444, 0.4908, 0.3819, 0.4846,
0.6256, 0.4638, 0.4778, 0.5219, 0.433, 0.447, 0.564, 0.4899,
0.4612, 0.6542, 0.5162, 0.5549, 0.4928, 0.4471, 0.4959, 0.4523,
0.3511), MLH = c(0.534090909090909, 0.5, NA, 0.40506329113924,
0.298507462686567, 0.410958904109589, 0.293103448275862,
0.442105263157895, 0.48, 0.554347826086957, 0.453488372093023,
0.535353535353535, 0.443298969072165, 0.304878048780488,
0.457446808510638, 0.455555555555556, 0.397849462365591,
0.494252873563218, 0.48314606741573, 0.377777777777778, 0.457446808510638,
0.445652173913043, 0.3, 0.412371134020619, 0.354838709677419,
0.464646464646465, 0.474226804123711, 0.43010752688172, 0.46078431372549,
0.541666666666667)), .Names = c("ID", "QnSinV1", "QnSinV2",
"QnSinV3", "QnSize", "QnWt", "QnWtLsCL", "ClaustPer", "QnSurvCL",
"ColWtCL", "ColWtCL_6", "ColGrowthCL_6", "QnSurvCL_6", "IR",
"SH", "HL", "MLH"), row.names = c(1L, 2L, 3L, 4L, 7L, 9L, 10L,
12L, 13L, 14L, 15L, 16L, 17L, 18L, 20L, 21L, 22L, 23L, 24L, 25L,
27L, 28L, 29L, 31L, 34L, 37L, 38L, 39L, 40L, 41L), class = "data.frame")
View(data2)
apply(is.na(data2), 1, any)
df[apply(!is.na(data2), 1, any),]
data2[apply(!is.na(data2), 1, any),]
apply(is.na(data2), 1, any)
sum(apply(is.na(data2), 1, any))
sum(apply(is.na(data2), 1, any)) / ncol(data2)
sum(apply(is.na(data2), 1, any)) / nrow(data2)
percent(sum(apply(is.na(data2), 1, any)) / nrow(data2))
print(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%')
help("print")
print(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'))
print(c(100 * sum(apply(is.na(data2), 1, any) / nrow(data2)), '%'))
cat(c(100 * sum(apply(is.na(data2), 1, any) / nrow(data2)), '%'), sep = '')
cat(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'), sep = '')
help(any)
apply(is.na(data), 1, any)
cat(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'), sep = '')
sum(apply(is.na(data), 1, any)
)
View(data)
help(paste)
print(um(apply(is.na(data), 1, any)))
print(sum(apply(is.na(data), 1, any)))
print(sum(apply(is.na(data2), 1, any)))
print(sum(apply(is.na(data), 1, any)))
cat(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'), sep = '')
help(cat)
paste(colnames(data), sep = '\n')
paste(colnames(data), '\n')
writeLines(paste(colnames(data),  '\n'))
writeLines(paste(colnames(data)))
writeLines((colnames(data))
writeLines(colnames(data))
writeLines(colnames(data))
help("writeLines")
writeLines(colnames(data))
nrow(data)
print(sum(apply(is.na(data), 1, any)))
help(cor)
paste(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'), sep = '')
cat
cat(c(100 * sum(apply(is.na(data), 1, any) / nrow(data)), '%'), sep = '')
help("mean")
print(lapply(data[, sapply(data, is.numeric)],mean(na.rm=TRUE)))
print(lapply(data[, sapply(data, is.numeric)],mean))
data_no_NA <- data[!is.na(data)]
data_no_NA
help("na.omit")
data_no_NA <- na.omit(data)
View(data_no_NA)
data_no_NA <- na.omit(data2)
View(data_no_NA)
View(data_no_NA)
is.numeric(c(1,3,NA))
is.numeric(c(1,3,'a'))
is.numeric(c(1,3,Na))
is.numeric(c(1,3,NA))
mean(c(1,2))
mean(c(1,2,NA))
na.omit(c(1,2,NA))
data_no_NA <- na.omit(data)
data_refine <- na.omit(data)
View(data_no_NA)
print(lapply(data_refine[, sapply(data_refine, is.numeric)],mean))
data
print(lapply(data[, sapply(data, is.numeric)],mean))
print(lapply(data_refine[, sapply(data_refine, is.numeric)],mean))
print(lapply(data_refine[, sapply(data_refine, is.factor)], table))
help("cor")
cor(data$x,data$y,method="pearson")
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
View(d)
View(d)
d_cor <- as.matrix(cor(d))
View(d_cor)
cor(d)
as.matrix(cor(d))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
cor(x[sapply(x, is.numeric)],method="pearson")
cor(x[sapply(x, is.numeric)])
cor(data[sapply(data, is.numeric)],method="pearson")
View(data)
View(data)
View(data2)
cor(data2[sapply(data2, is.numeric)],method="pearson")
View(data2)
View(data2)
cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
data2_refine <- na.omit(data2)
cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
View(data2_refine)
View(data2_refine)
cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
sapply(data2_refine, is.numeric)
data2_refine[sapply(data2_refine, is.numeric)]
cor(data2_refine[sapply(data2_refine, is.numeric))
cor(data2_refine[sapply(data2_refine, is.numeric]))
cor(data2_refine[sapply(data2_refine, is.numeric])
cor(data2_refine[sapply(data2_refine, is.numeric)])
View(data2)
View(data2)
View(data2_refine)
View(data2_refine)
data2_refine <- na.omit(data)
data2_refine[sapply(data2_refine, is.numeric)]
cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
cor(data$x,data$y,method="pearson")
letters[1:10]
cor <- cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
View(cor)
View(cor)
class(cor)
cor <- as.dara.frame(cor)
cor <- as.data.frame(cor)
class(cor)
install.packages('dplyr')
library(dplyr)
library(reshape2)
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("reshape2")
library(reshape2)
library(dplyr)
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.3")
library("reshape2", lib.loc="~/R/win-library/3.3")
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
d_cor <- as.matrix(cor(d))
d_cor_melt <- arrange(melt(d_cor), -abs(value))
View(d_cor)
View(d_cor)
d_cor_melt <- arrange(melt(d_cor), -abs(value))
View(d_cor_melt)
View(d_cor_melt)
help("arrange")
data_refine <- na.omit(data)
cor <- cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
View(data_refine)
View(data_refine)
cor <- cor(data2_refine[sapply(data2_refine, is.numeric)],method="pearson")
View(cor)
View(cor)
cor <- as.data.frame(cor)
View(cor)
View(cor)
variables <- data[is.numeric(data)]
View(variables)
View(variables)
View(variables)
variables
d_cor_melt <- arrange(melt(d_cor), -abs(value))
View(d_cor_melt)
View(d_cor_melt)
View(d_cor)
View(d_cor_melt)
View(d_cor_melt)
d_cor_melt <- arrange(melt(d_cor))
View(d_cor_melt)
View(d_cor_melt)
View(d_cor_melt)
View(d_cor_melt)
cor <- as.matrix(cor)
View(cor)
View(cor)
d_cor_melt <- arrange(melt(d_cor))
data_cor_melt <- arrange(melt(cor))
View(data_cor_melt)
View(data_cor_melt)
help("duplicated")
data_cor_melt <- data_cor_melt[!duplicated(data_cor_melt)]
data_cor_melt <- data_cor_melt[!duplicated(data_cor_melt)]
data_cor_melt <- data_cor_melt[!duplicated(data_cor_melt),3]
data_cor_melt <- as.matrix(data_cor_melt[!duplicated(data_cor_melt),3])
data_cor_melt <- as.matrix(data_cor_melt[!duplicated(data_cor_melt),])
data_cor_melt <- as.matrix(data_cor_melt[,!duplicated(data_cor_melt)])
data_cor_melt <- as.matrix(data_cor_melt[!duplicated(data_cor_melt),])
data_cor_melt <- data_cor_melt[!duplicated(data_cor_melt),]
View(d_cor_melt)
View(d_cor_melt)
View(data)
View(d_cor_melt)
View(d_cor_melt)
data_cor_melt <- arrange(melt(cor))
View(data_cor_melt)
View(data_cor_melt)
data_cor_melt <- data_cor_melt[!duplicated(data_cor_melt),]
View(data_cor_melt)
View(data_cor_melt)
data_cor_melt <- arrange(melt(cor))
View(data_cor_melt)
methods(print())
methods(print
methods(print)
methods(print)
methods(data.frame)
methods(data)
?ggplot
?methods
str(data)
structure(data)
str(data)
library(help="methods")
library(help="methods")
methods(.data.frame)
methods(data.frame)
methods(data.frame(data))
summary(data)
?ls
names(data)
ls()
?melt
cor <- cor(data1_refine[sapply(data1_refine, is.numeric)],method="pearson")
data_refine <- na.omit(data)
cor <- cor(data1_refine[sapply(data1_refine, is.numeric)],method="pearson")
cor <- cor(data1_refine[sapply(data1_refine, is.numeric)],method="pearson")
cor <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
coor
cor
class(cor)
cor <- as.data.frame(as.table(cor_matrix))
cor_matrix <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
cor <- as.data.frame(as.table(cor_matrix))
caor
cor
as.table(cor_matrix)
table(cor_matrix)
z <- na.omit(melt(cor_matrix))
View(z)
View(z)
data1 = as.data.frame( as.table( data ) )
combinations = combn( colnames( data ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
data1 = data1[ data1$Var1 != data1$Var2 , ]
data1 = data1[ paste( data1$Var1 , data1$Var2 , sep = "_" ) %in% combinations , ]
data1 = as.data.frame( as.table( data ) )
data1 = as.data.frame( as.table( data ) )
data
View(data)
View(data)
data1 = as.data.frame( as.table( data ) )
data1 = as.data.frame( as.table( cor_matrix ) )
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
data1 = data1[ data1$Var1 != data1$Var2 , ]
data1 = data1[ paste( data1$Var1 , data1$Var2 , sep = "_" ) %in% combinations , ]
View(data1)
View(data1)
data_refine <- na.omit(data)
cor_matrix <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
cor <- as.data.frame(as.table(cor_matrix))
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
cor = cor[ cor$Var1 != cor$Var2 , ]
cor = cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor
output = paste(df$Var1,df$Var2)
cor[,1] = paste(df$Var1,df$Var2)
cor[,1] = paste(cor$Var1,cor$Var2)
cor
cor[,1] = paste(cor$Var1, cor$Var2, sep='-')
cor
cor
cor <- as.data.frame(as.table(cor_matrix))
cor = cor[ cor$Var1 != cor$Var2 , ]
cor = cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor[,1] = paste(cor$Var1, cor$Var2, sep='-')
cor
cor <- as.data.frame(as.table(cor_matrix))
cor <- as.data.frame(as.table(cor_matrix))
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
cor <-  cor[ cor$Var1 != cor$Var2 , ]
cor <-  cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
output <- as.datafram(paste(cor$Var1, cor$Var2, sep='-'))
output <- as.data.frame(paste(cor$Var1, cor$Var2, sep='-'))
output
output <- as.data.frame(paste(cor$Var1, cor$Var2, sep='-')), cor[,3]
output <- as.data.frame(paste(cor$Var1, cor$Var2, sep='-')), cor[,3])
output <- as.data.frame(paste(cor$Var1, cor$Var2, sep='-')), cor[,3])
output <- as.data.frame(paste(cor$Var1, cor$Var2), sep='-')), cor[,3])
output <- as.data.frame(paste(cor$Var1, cor$Var2), sep='-'), cor[,3])
output <- as.data.frame((paste(cor$Var1, cor$Var2), sep='-'), cor[,3])
output_1 <- (paste(cor$Var1, cor$Var2)
output_1 <- (paste(cor$Var1, cor$Var2))
output_1 <- (paste(cor$Var1, cor$Var2), sep='-')
output_1 <- (paste(cor$Var1, cor$Var2), sep='-')
output <- as.data.frame((paste(cor$Var1, cor$Var2, sep='-')), cor[,3])
g = paste(cor$Var1, cor$Var2, sep='-')
g
p=cor[,3]
p
output <- as.data.frame(g,p)
help("as.data.frame")
output <- as.data.frame(as.table(g,p))
help("as.table")
data_refine <- na.omit(data)
cor_matrix <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
cor <- as.data.frame(as.table(cor_matrix))
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
cor <-  cor[ cor$Var1 != cor$Var2 , ]
cor <-  cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor
cor <-  cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor
cor <-  cor[ cor$Var1 != cor$Var2 , ]
data_refine <- na.omit(data)
cor_matrix <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
cor <- as.data.frame(as.table(cor_matrix))
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
cor <-  cor[ cor$Var1 != cor$Var2 , ]
cor <-  cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor
cor[,1] = paste(cor$Var1 , cor$Var2 , sep = "-")
cor
cor[,2] <- NULL
cor
return (cor)
corr(data)
corr <- function(data) {
data_refine <- na.omit(data)
cor_matrix <- cor(data_refine[sapply(data_refine, is.numeric)],method="pearson")
cor <- as.data.frame(as.table(cor_matrix))
combinations = combn( colnames( cor_matrix ) , 2 , FUN = function( x ) { paste( x , collapse = "_" ) } )
cor <-  cor[ cor$Var1 != cor$Var2 , ]
cor <-  cor[ paste( cor$Var1 , cor$Var2 , sep = "_" ) %in% combinations , ]
cor[,1] = paste(cor$Var1 , cor$Var2 , sep = "-")
cor[,2] <- NULL
return (cor)
}
corr(data)
